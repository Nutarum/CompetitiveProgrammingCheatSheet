// sort arr1, arr2 and arr3 based on the values of arr1
// use example: mergeSort(arr1,arr2,arr3,0,n-1)
// in the example 0 and n-1 are included in the sorting

void merge(int arr[],int arr2[], int arr3[], int l, int m, int r) { 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
    /* create temp arrays */
    int L[n1], R[n2]; 
     int L2[n1], R2[n2]; 
      int L3[n1], R3[n2]; 
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) {
        L[i] = arr[l + i]; 
        L2[i] = arr2[l + i]; 
         L3[i] = arr3[l + i]; 
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[m + 1+ j]; 
        R2[j] = arr2[m + 1+ j]; 
        R3[j] = arr3[m + 1+ j]; 
    }
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) { 
        if (L[i] <= R[j]) { 
            arr[k] = L[i]; 
             arr2[k] = L2[i]; 
              arr3[k] = L3[i]; 
            i++; 
        } else {
            arr[k] = R[j]; 
              arr2[k] = R2[j]; 
                arr3[k] = R3[j]; 
            j++; 
        } 
        k++; 
    } 
    /* Copy the remaining elements of L[], if there 
       are any */
    while (i < n1) { 
        arr[k] = L[i]; 
        arr2[k] = L2[i]; 
        arr3[k] = L3[i]; 
        i++; 
        k++; 
    } 
    /* Copy the remaining elements of R[], if there 
       are any */
    while (j < n2) {         
        arr[k] = R[j]; 
         arr2[k] = R2[j]; 
        arr3[k] = R3[j]; 
        j++; 
        k++; 
    } 
} 
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
void mergeSort(int arr[],int arr2[],int arr3[], int l, int r) { 
    if (l < r) { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
        // Sort first and second halves 
        mergeSort(arr,arr2,arr3, l, m); 
        mergeSort(arr,arr2,arr3, m+1, r); 
        merge(arr,arr2,arr3, l, m, r); 
    } 
} 