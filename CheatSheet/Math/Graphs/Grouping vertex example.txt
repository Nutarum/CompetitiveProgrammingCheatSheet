// https://codeforces.com/contest/977/problem/E

// the idea is to assign groups to vertex
// two vertex are in the same group if they are connected by edges
// counting the number of groups having all vertex with 2 edges is the answer

// during the implementation, all elements in a group except one (the head) have negative values
// a negative value is a pointer to the index of other element on this group
// if u follow the pointers, u will ALWAYS reach a positive value, the head of the group
// index 0 of the array will not be used (as it cant be negative)

// (e.g.) array = [0,-2,2,-1,-6,-6,6]
// we have 2 groups, group 2, containing 1,2 and 3, and group 6, with 4,5 and 6
// element 3 is in the group 2 cause array[3] contains -1, and array[1] contains -2, and array[2] contains +2

#include<stdio.h>
static int parseint(void){
   int c, n;
   n = getchar() - '0';
   while ((c = getchar()) >= '0')
       n = 10*n + c-'0';
   return n;
}

int grupos[200001];
int naristas[200001];
int gruposOk[200001];
int v;

// given a vertex with negative index, loop until it reaches the head
// and asign the head value (as a positive value) to all the elements in the way
int recursivear(int i){
    if(grupos[i]<0){
        grupos[i] = recursivear(-grupos[i]); 
    }
   return grupos[i];
}

// given a vertex with negative index, loop until it reaches the head
// and asign the head value (as a negative value) to all the elements in the way
// this funtion is usefull so each time we search for a head, all values
//  are updated so they will reach the head earlier on future searches
int recursivearNegativo(int i){
    if(grupos[i]>0){
        return grupos[i];
    }
    if(grupos[i]<0){
        grupos[i] = -recursivearNegativo(-grupos[i]); 
    }
   return -grupos[i];
}

//given 2 vertex, force them to be in the same group
void unificarGrupos(int indice1, int indice2){    
	//search for the head of vertex 1 group 
    indice1 = recursivearNegativo(indice1);
	//search for the head of vertex 2 group 
    indice2 = recursivearNegativo(indice2);    
	//if the head of both is not the same
    if(indice1 != indice2){
		//make one head point to the other (we are merging 2 diferent groups)
         grupos[indice1] = -indice2;
    }    
}

int main() {  
    v = parseint();
    int a = parseint();
    int i;    
   
   //initializations
    for(i=1;i<=v;i++){
        grupos[i]=i;
        gruposOk[i]=0;
        naristas[i]=0;
    }
	
	//reading input and processing edges
    for(i=0;i<a;i++){
        int v1 =parseint();
        int v2 =parseint();
		
		//we count the edges for each vertex (
        naristas[v1]++;
        naristas[v2]++;
        
		//process the edge
		unificarGrupos(v1,v2);
        
    }
    
    
    //now we set the value of each vertex to the head of its group
     for(i=1;i<=v;i++){
        if(grupos[i]<0){
          recursivear(i);
        }   
     }    
    
    //now we can get the result, we have to count the number of groups having all vertex with exactly 2 edges
    int contador = 0;
    for(i=1;i<=v;i++){
         gruposOk[i]=0;
    }
    
    for(i=1;i<=v;i++){
        if(naristas[i]==2){
            if(gruposOk[grupos[i]]==0){
                contador++;
                gruposOk[grupos[i]]=1;
            }
        }else{
            if(gruposOk[grupos[i]]==1){
               contador--;
            }
             gruposOk[grupos[i]]=-1;
        }  
    }
    
    printf("%d\n",contador);     
}