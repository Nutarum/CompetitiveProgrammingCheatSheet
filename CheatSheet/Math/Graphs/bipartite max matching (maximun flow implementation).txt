//SOLUCION PARA -> https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2100ç

//maximun flow aproximation (cuando el tamaño del grafo es gordo, el otro metodo debe ser mejor)
//matching copiado de -> https://www.geeksforgeeks.org/maximum-bipartite-matching/

#include <iostream> 
#include <string.h> 
using namespace std;  

// M is the maximum number of applicants  (m is the actual number)
// and N is the maximim number of jobs (n is the actual number)
#define M 100
#define N 100
// A DFS based recursive function  
// that returns true if a matching 
// for vertex u is possible 
bool bpm(bool bpGraph[M][N], int u, bool seen[], int matchR[], int m, int n){ 
    // Try every job one by one 
    for (int v = 0; v < n; v++){ 
        // If applicant u is interested in  
        // job v and v is not visited 
        if (bpGraph[u][v] && !seen[v]){ 
            // Mark v as visited 
            seen[v] = true;  
  
            // If job 'v' is not assigned to an  
            // applicant OR previously assigned  
            // applicant for job v (which is matchR[v])  
            // has an alternate job available.  
            // Since v is marked as visited in  
            // the above line, matchR[v] in the following  
            // recursive call will not get job 'v' again 
            if (matchR[v] < 0 || bpm(bpGraph, matchR[v],seen, matchR,m,n)){ 
                matchR[v] = u; 
                return true; 
            } 
        } 
    } 
    return false; 
} 
  
// Returns maximum number
// of matching from M to N
int maxBPM(bool bpGraph[M][N], int m, int n){ 
    // An array to keep track of the  
    // applicants assigned to jobs.  
    // The value of matchR[i] is the  
    // applicant number assigned to job i, 
    // the value -1 indicates nobody is 
    // assigned. 
    int matchR[n]; 
  
    // Initially all jobs are available 
    memset(matchR, -1, sizeof(matchR)); 
  
    // Count of jobs assigned to applicants 
    int result = 0;  
    for (int u = 0; u < m; u++){ 
        // Mark all jobs as not seen  
        // for next applicant. 
        bool seen[n]; 
        memset(seen, 0, sizeof(seen)); 
  
        // Find if the applicant 'u' can get a job 
        if (bpm(bpGraph, u, seen, matchR,m,n)) 
            result++; 
    } 
    return result; 
} 

int main() {    
    int arrA[100];
    int nA,nB;
    bool mat[100][100];
    int casos;
    int contador = 1;
    cin>>casos;
    while(casos>0){  
        cin>>nA;       
        
        for(int i=0;i<nA;i++){
            cin>>arrA[i];
            if(arrA[i]<0){
                arrA[i]*=-1;
            }
        }
     
        cin>>nB;
        for(int i=0;i<nB;i++){
            int B;
            cin>>B;
            if(B<0){
                B*=-1;
            }
            // vamos a montar la matriz de adyacencias del grafo
            // en esta matriz, vamos a marcar como 1 las aristas no elegidas para el matching
            // -1 las si elegidas
            // 0 para el resto
            for(int j=0;j<nA;j++){
                //si B es multiplo de A
                bool isMultiple = false;                
                if(B==0){
                    isMultiple=true;                    
                }else if(arrA[j]==0){                    
                    isMultiple=false;
                }else if(B%arrA[j]==0){
                    isMultiple=true;
                }
                if(isMultiple){
                    mat[j][i]=true;
                }else{
                    mat[j][i]=false;
                }
            }
        }
        printf("Case %d: %d\n",contador,maxBPM(mat,nA,nB));
        contador++;
        casos--;
    } 
}