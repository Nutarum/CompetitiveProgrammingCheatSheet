//Tree
struct Node{   
    int valor;
    Node * Left;
    Node * Right;
};

static Node *head;

static void generarArbol(){
    head = new Node;  
    head->valor = 0;
    head->Left = NULL;
    head->Right = NULL;
}




// Priority queue
#include <queue> 

std::priority_queue<int, vector<int>, std::greater<int> > clientesAlto;
std::priority_queue<int > clientesBajo;

clientesBajo.size()==0;
clientesBajo.top();		//OBTENER PRIMER ELEMENTO
clientesBajo.push(n);	//AÃ‘ADIR ELEMENTO
clientesBajo.pop();		//ELIMINAR PRIMER ELEMENTO
	

    
    
    
   
   
//Priority queue with pair of values
#include <iostream>
#include <queue> 
using namespace std;

// By default a max heap is created ordered
// by first element of pair.
priority_queue<pair<int, int> > pq;

// By default a min heap is created ordered
// by first element of pair.
typedef pair<int, int> pi;
priority_queue<pi, vector<pi>, std::greater<pi>> pq2;

//Both pq and pq2 are used identically

int main() {	
	pq.push(make_pair(10, 1));
	pq.push(make_pair(20, 2));

	pair<int, int> top = pq.top();
	printf("%d %d\n", top.first, top.second);
	
	while(!pq.empty()){
		pq.pop();
	}
}
