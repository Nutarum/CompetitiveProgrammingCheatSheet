// sort arr1 and arr2 based on the values of arr1
// use example: quicksort(arr1,arr2,0,n-1)
// in the example 0 and n-1 are included in the sorting

// Función para dividir el array y hacer los intercambios
int divide(int *array, int* arr2, int start, int end) {
    int left;
    int right;
    int pivot;
    int temp;
 
    pivot = array[start];
    left = start;
    right = end;
 
    // Mientras no se cruzen los índices
    while (left < right) {
        while (array[right] > pivot) {
            right--;
        }
 
        while ((left < right) && (array[left] <= pivot)) {
            left++;
        }
 
        // Si todavía no se cruzan los indices seguimos intercambiando
        if (left < right) {
            temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            
            temp = arr2[left];
            arr2[left] = arr2[right];
            arr2[right] = temp;
            
        }
    }
 
    // Los índices ya se han cruzado, ponemos el pivot en el lugar que le corresponde
    temp = array[right];
    array[right] = array[start];
    array[start] = temp;
    
    temp = arr2[right];
    arr2[right] = arr2[start];
    arr2[start] = temp;
    
 
    // La nueva posición del pivot
    return right;
}
 
// Función recursiva para hacer el ordenamiento MODIFICADA PARA ORDENAR TAMBIEN LOS 2 ARRAYS EXTRAS
void quicksort(int *array, int* arr2, int start, int end)
{
    int pivot;
 
    if (start < end) {
        pivot = divide(array,arr2, start, end);
 
        // Ordeno la lista de los menores
        quicksort(array,arr2, start, pivot - 1);
 
        // Ordeno la lista de los mayores
        quicksort(array,arr2, pivot + 1, end);
    }
}